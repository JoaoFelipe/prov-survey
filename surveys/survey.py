"""Survey questions"""
# pylint: disable=invalid-name
# pylint: disable=line-too-long

import os
import binascii
from collections import OrderedDict

from flask import session, render_template
from flask_babel import gettext, lazy_gettext

from itertools import chain

from .db import db, Answer

from .helper import erase, goto, question_form, radio_question, last, answer
from .helper import option, set_navbar, survey_question, save_answer

from .forms import StartForm, NextForm
from .forms import ExperimentCount, Domains, Experience, Situations
from .forms import Country, Comments
from .forms import Tools, Preference, PreferenceReasons
from .forms import Integration, Likelyhood
from .forms import Analysis, AnalysisReasons, AnalysisTools
from .forms import YesNo
from .forms import Consent, NameForm, EmailForm, FreeText
from .forms import Education, Education, YearMonth

FORMS = OrderedDict([
    ('c1', Consent),
    ('p1', NameForm),
    ('p2', EmailForm),
    ('p3', FreeText),
    ('p4', Education),
    ('p5', YearMonth),
    ('p6', YearMonth),
    ('p7', FreeText),
    ('t2', Preference),
    ('t3', PreferenceReasons),
    ('i1', Integration),
    ('i2', Likelyhood),
    ('a1', Analysis),
    ('a2', AnalysisReasons),
    ('a3', AnalysisTools),
    ('a4', YesNo),
    ('a5', YesNo),
    ('c2', YesNo),
    
    ('p8', Comments),
])


TITLES = {
    'c1': lazy_gettext('Termo de Consentimento Livre e Esclarecido (TCLE)'),
    'p1': lazy_gettext('Qual é o seu nome?'),
    'p2': lazy_gettext('Qual é o seu e-mail?'),
    'p3': lazy_gettext('Identificação (CPF, RG, Matrícula)'),
    'p4': lazy_gettext('Qual é a sua formação acadêmica?'),
    'p5': lazy_gettext('Data de ingresso'),
    'p6': lazy_gettext('Data de conclusão (ou previsão de conclusão)'),
    'p7': lazy_gettext('Área de Concentração (ou Curso)'),
    't2': lazy_gettext('Which is your favorite tool for developing and running scientific experiments?'),
    't3': lazy_gettext('What are the reasons for your preference? (check all that apply)'),
    'i1': lazy_gettext('Have you ever used more than one tool in a single experiment?'),
    'i2': lazy_gettext('Consider a collaborative science scenario where two teams execute variations of a given experiment and perform a joint analysis of these experiments, by comparing result data, methods, duration, and/or used parameters. In your experience, how likely is this scenario going to manifest itself in practice?'),
    'a1': lazy_gettext('Have you ever analyzed provenance from your experiments?'),
    'a2': lazy_gettext('What value if any do you seek from provenance analysis? (check all that apply)'),
    'a3': lazy_gettext('Which tools/languages have you ever used to analyze provenance? (check all that apply)'),
    'a4': lazy_gettext('Have you ever analyzed (or had to analyze) two or more provenance databases generated by variations of a given experiment together? This includes both the case of different teams running the experiments independently, as well as a single experimenter working on variants of an experiment.'),
    'a5': lazy_gettext('These experiments were executed in different tools?'),
    'c2': lazy_gettext('Would you accept being contacted to clarify some details about the answers you provided in this survey?'),
    'c3': lazy_gettext('Please, enter your email so we can contact you.'),
    'p7': lazy_gettext('What is the name of your institution and what role do you play in it? [Optional]'),
    'p8': lazy_gettext('Do you have any comments or suggestions?'),

}

ORDER = [x.upper() for x in FORMS.keys()] + ['finish']


def form(number, next_question, title, options=None, sub_template=None):
    """Question Form based on Form type"""
    form_class = FORMS[number]
    question_function = (
        question_form if form_class._mode != 'radio' else radio_question
    )
    return question_function(
        number, next_question, form_class, title,
        options=options, sub_template=sub_template
    )


@set_navbar(6)
def index():
    """First page"""
    lang = session['s_lang']
    form = (NextForm if 's_uid' in session else StartForm)()
    if form.validate_on_submit():
        if form.submit.data:
            if 's_uid' in session:
                save_answer('finish', {'submit': 'restart'})
            origin = session.get('s_origin', 'main')
            session.clear()
            session['s_origin'] = origin
            session['s_lang'] = lang
            session['s_index'] = True
            session['s_uid'] = binascii.hexlify(os.urandom(24))

            save_answer('origin', {'submit': origin})
            save_answer('index', {'submit': 'yes'})
            # ToDo: save
        session['s_p1'] = True
        return goto('p1')
    return render_template('index.html', form=form)

@survey_question('index', 20)
def c1():
    """Q1/C1"""
    title = TITLES['c1']
    return form('c1', (lambda: 'p1' if option('c1') != 'no' else 'finish'), title, sub_template="c1.html")


@survey_question('c1', 18)
def p1():
    """Q2/P1"""
    title = TITLES['p1']
    return form('p1', 'p2', title)


@survey_question('p1', 18)
def p2():
    """Q3/P2"""
    title = TITLES['p2']
    return form('p2', 'p3', title)


@survey_question('p2', 18)
def p3():
    """Q4/P3"""
    title = TITLES['p3']
    return form('p3', 'p4', title)


@survey_question('p3', 18)
def p4():
    """Q5/P4"""
    title = TITLES['p4']
    return form('p4', 'p5', title)


@survey_question('p4', 17)
def p5():
    """Q6/P5"""
    title = TITLES['p5']
    return form('p5', 'p6', title)

@survey_question('p5', 5)
def p6():
    """Q7/P6"""
    title = TITLES['p6']
    return form('p6', 't1', title)

@survey_question('p6', 5)
def p7():
    """Q8/P7"""
    title = TITLES['p7']
    return form('p7', 'e1', title)

@survey_question('p7', 5)
def e1():
    """Q9/E1"""
    title = TITLES['e1']
    return form('e1', 'e2', title)

@survey_question('e1', 5)
def e2():
    """Q10/E2"""
    title = TITLES['e2']
    return form('e2', 'e3', title)

@survey_question('e2', 5)
def e3():
    """Q11/E3"""
    title = TITLES['e3']
    return form('e3', 'e4', title)

@survey_question('e3', 5)
def e4():
    """Q12/E4"""
    title = TITLES['e4']
    return form('e4', 'e5', title)

@survey_question('e4', 5)
def e5():
    """Q13/E5"""
    title = TITLES['e5']
    return form('e5', 'e6', title)

@survey_question('e5', 5)
def e6():
    """Q14/E6"""
    title = TITLES['e6']
    return form('e6', 'e7', title)

@survey_question('e6', 5)
def e7():
    """Q14/E7"""
    title = TITLES['e7']
    return form('e7', 'e8', title)

@survey_question('e6', 5)
def e7():
    """Q14/E7"""
    title = TITLES['e7']
    return form('e7', 'e8', title)


def t1_answers():
    ans = answer('t1')
    items = [
        (k, getattr(Tools, k).args[0]) for k, v in ans.items()
        if 'other' not in k
        if v
    ]
    if "other_e" in ans and ans["other_e"]:
        items.append(
            ('other_e', ans['other']) if 'other' in ans else
            ('other_e', getattr(Tools, 'other_e').args[0])
        )
    return items


@survey_question('p6', 4)
def t1():
    """Q6/T1"""
    title = TITLES['t1']
    def redir():
        t1_ans = t1_answers()
        if len(t1_ans) <= 1:
            erase(['t2', 't3'])
            return 'i1'
        if option('t2', '') not in {k for k, v in chain(t1_ans, [("no", 0)])}:
            erase(['t2', 't3'])
        return 't2'

    return form('t1', redir, title)


@survey_question('t1', 4)
def t2():
    """Q7/T2"""
    title = TITLES['t2']
    t1_ans = t1_answers()
    if len(t1_ans) <= 1:
        erase(['t2', 't3'])
        return goto('i1')

    options = t1_ans + Preference.options.kwargs['choices'][-1:]
    return form('t2', 't3', title, options=options)


@survey_question('t2', 4)
def t3():
    """Q8/T3"""
    title = TITLES['t3']
    if answer('t2').get('options', {}) and option('t2', 'no') in {'no', 'None'}:
        erase('t3')
        return goto('i1')
    return form('t3', 'i1', title)


@survey_question('t1', 3)
def i1():
    """Q9/I1"""
    title = TITLES['i1']
    return form('i1', 'i2', title)


@survey_question('i1', 3)
def i2():
    """Q10/I2"""
    title = TITLES['i2']
    return form('i2', 'a1', title)


@survey_question('i2', 3)
def a1():
    """Q11/A1"""
    title = TITLES['a1']
    return form('a1', 'a2', title)


@survey_question('a1', 2)
def a2():
    """Q12/A2"""
    title = TITLES['a2']
    if option('a1', '') in {'what_is_provenance',}:
        erase(['a2', 'a3', 'a4', 'a5'])
        return goto('c1')
    return form('a2', 'a3', title)


@survey_question('a2', 2)
def a3():
    """Q13/A3"""
    title = TITLES['a3']
    if option('a1', '') in {'what_is_provenance',}:
        erase(['a2', 'a3', 'a4', 'a5'])
        return goto(last(ORDER))
    if option('a1', '') in {'no', 'None'}:
        erase(['a3', 'a4', 'a5'])
        return goto('c1')
    return form('a3', 'a4', title)


@survey_question('a3', 2)
def a4():
    """Q14/A4"""
    title = TITLES['a4']
    return form('a4', 'a5', title)


@survey_question('a4', 2)
def a5():
    """Q15/A5"""
    title = TITLES['a5']
    if option('a4') == 'no':
        erase('a5')
        return goto('c1')
    return form('a5', 'c1', title)




@survey_question('c1', 1)
def c2():
    """Q17/C2"""
    title = TITLES['c2']
    return form('c2', 'c3', title)


@survey_question('c2', 1)
def c3():
    """Q18/C3"""
    title = TITLES['c3']
    if all(option(x) != 'yes' for x in ['c1', 'c2']):
        erase('c3')
        return goto('p7')
    return form('c3', 'p7', title)

@survey_question([('c2', 'c3')], 1)
def p7():
    """NQ2/P7"""
    title = TITLES['p7']
    return form('p7', 'p8', title)


@survey_question('p7', 1)
def p8():
    """NQ3/P8"""
    title = TITLES['p8']
    return form('p8', 'finish', title)

@set_navbar(lazy_gettext('Thank you'))
def finish():
    """Thank you page"""
    save_answer('finish', {'submit': 'final'})
    lang = session['s_lang']
    origin = session.get('s_origin', 'main')
    session.clear()
    session['s_lang'] = lang
    session['s_minutes'] = gettext('Thank you')
    session['s_url'] = 'finish'
    session['s_origin'] = origin
    return render_template('finish.html')
